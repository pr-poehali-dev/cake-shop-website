import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import Icon from '@/components/ui/icon';

interface Cake {
  id: number;
  name: string;
  description: string;
  pricePerKg: number;
  image: string;
}

interface OrderForm {
  cake: Cake | null;
  weight: number;
  name: string;
  phone: string;
  comment: string;
}

const Index = () => {
  const [activeSection, setActiveSection] = useState('home');
  const [isAdmin, setIsAdmin] = useState(false);
  const [editingCake, setEditingCake] = useState<Cake | null>(null);
  const [orderForm, setOrderForm] = useState<OrderForm | null>(null);
  const [cakes, setCakes] = useState<Cake[]>([
    {
      id: 1,
      name: '–®–æ–∫–æ–ª–∞–¥–Ω—ã–π –í–µ–ª—é—Ä',
      description: '–ù–µ–∂–Ω—ã–π —à–æ–∫–æ–ª–∞–¥–Ω—ã–π –±–∏—Å–∫–≤–∏—Ç —Å —Ö—Ä—É—Å—Ç—è—â–∏–º —Å–ª–æ–µ–º –ø—Ä–∞–ª–∏–Ω–µ –∏ –±–µ–ª—å–≥–∏–π—Å–∫–∏–º —à–æ–∫–æ–ª–∞–¥–æ–º',
      pricePerKg: 3500,
      image: 'https://images.unsplash.com/photo-1578985545062-69928b1d9587?w=600&q=80'
    },
    {
      id: 2,
      name: '–ú–∞–ª–∏–Ω–æ–≤—ã–π –ú—É—Å—Å',
      description: '–í–æ–∑–¥—É—à–Ω—ã–π –≤–∞–Ω–∏–ª—å–Ω—ã–π –º—É—Å—Å —Å –º–∞–ª–∏–Ω–æ–≤—ã–º –∫–æ–Ω—Ñ–∏ –∏ –º–∏–Ω–¥–∞–ª—å–Ω–æ–π –æ—Å–Ω–æ–≤–æ–π',
      pricePerKg: 3200,
      image: 'https://images.unsplash.com/photo-1464349095431-e9a21285b5f3?w=600&q=80'
    },
    {
      id: 3,
      name: '–§–∏—Å—Ç–∞—à–∫–æ–≤–æ–µ –ò—Å–∫—É—à–µ–Ω–∏–µ',
      description: '–§–∏—Å—Ç–∞—à–∫–æ–≤—ã–π –±–∏—Å–∫–≤–∏—Ç —Å –∫—Ä–µ–º–æ–º –∏–∑ —Å–∏—Ü–∏–ª–∏–π—Å–∫–∏—Ö —Ñ–∏—Å—Ç–∞—à–µ–∫ –∏ –±–µ–ª—ã–º —à–æ–∫–æ–ª–∞–¥–æ–º',
      pricePerKg: 4000,
      image: 'https://images.unsplash.com/photo-1565958011703-44f9829ba187?w=600&q=80'
    },
    {
      id: 4,
      name: '–ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π –°–æ–Ω',
      description: '–ù–µ–∂–Ω—ã–π –±–∏—Å–∫–≤–∏—Ç —Å —Å–æ–ª–µ–Ω–æ–π –∫–∞—Ä–∞–º–µ–ª—å—é, –æ—Ä–µ—Ö–∞–º–∏ –ø–µ–∫–∞–Ω –∏ –∫—Ä–µ–º–æ–º –º–∞—Å–∫–∞—Ä–ø–æ–Ω–µ',
      pricePerKg: 3300,
      image: 'https://images.unsplash.com/photo-1563729784474-d77dbb933a9e?w=600&q=80'
    },
    {
      id: 5,
      name: '–¢–∏—Ä–∞–º–∏—Å—É –ö–ª–∞—Å—Å–∏–∫',
      description: '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫–ª–∞—Å—Å–∏–∫–∞: —Å–∞–≤–æ—è—Ä–¥–∏, –∫—Ä–µ–º –º–∞—Å–∫–∞—Ä–ø–æ–Ω–µ, –∫–æ—Ñ–µ –∏ –∫–∞–∫–∞–æ',
      pricePerKg: 2800,
      image: 'https://images.unsplash.com/photo-1571877227200-a0d98ea607e9?w=600&q=80'
    },
    {
      id: 6,
      name: '–Ø–≥–æ–¥–Ω–∞—è –°–∏–º—Ñ–æ–Ω–∏—è',
      description: '–õ–µ–≥–∫–∏–π –±–∏—Å–∫–≤–∏—Ç —Å –º—É—Å—Å–æ–º –∏–∑ –∫–ª—É–±–Ω–∏–∫–∏, —á–µ—Ä–Ω–∏–∫–∏ –∏ –µ–∂–µ–≤–∏–∫–∏',
      pricePerKg: 3400,
      image: 'https://images.unsplash.com/photo-1488477181946-6428a0291777?w=600&q=80'
    }
  ]);

  useEffect(() => {
    const savedCakes = localStorage.getItem('cakes');
    if (savedCakes) {
      setCakes(JSON.parse(savedCakes));
    }
  }, []);

  const saveCakes = (newCakes: Cake[]) => {
    setCakes(newCakes);
    localStorage.setItem('cakes', JSON.stringify(newCakes));
  };

  const handleEditCake = (cake: Cake) => {
    setEditingCake({ ...cake });
  };

  const handleSaveCake = () => {
    if (editingCake) {
      const updatedCakes = cakes.map(c => 
        c.id === editingCake.id ? editingCake : c
      );
      saveCakes(updatedCakes);
      setEditingCake(null);
    }
  };

  const handleAddCake = () => {
    const newCake: Cake = {
      id: Date.now(),
      name: '–ù–æ–≤—ã–π —Ç–æ—Ä—Ç',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ—Ä—Ç–∞',
      pricePerKg: 3000,
      image: 'https://images.unsplash.com/photo-1578985545062-69928b1d9587?w=600&q=80'
    };
    saveCakes([...cakes, newCake]);
  };

  const handleDeleteCake = (id: number) => {
    const updatedCakes = cakes.filter(c => c.id !== id);
    saveCakes(updatedCakes);
  };

  const handleOrderCake = (cake: Cake) => {
    setOrderForm({
      cake,
      weight: 1,
      name: '',
      phone: '',
      comment: ''
    });
  };

  const calculateTotal = () => {
    if (!orderForm?.cake) return 0;
    return orderForm.cake.pricePerKg * orderForm.weight;
  };

  const handleSubmitOrder = () => {
    if (!orderForm?.cake || !orderForm.name || !orderForm.phone) return;
    
    const total = calculateTotal();
    const message = `üéÇ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑\n\n–¢–æ—Ä—Ç: ${orderForm.cake.name}\n–í–µ—Å: ${orderForm.weight} –∫–≥\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${total} ‚ÇΩ\n\n–ö–ª–∏–µ–Ω—Ç: ${orderForm.name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${orderForm.phone}${orderForm.comment ? `\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${orderForm.comment}` : ''}`;
    
    const encodedMessage = encodeURIComponent(message);
    window.open(`https://wa.me/79518313316?text=${encodedMessage}`, '_blank');
    
    setOrderForm(null);
  };

  const scrollToSection = (section: string) => {
    setActiveSection(section);
    const element = document.getElementById(section);
    element?.scrollIntoView({ behavior: 'smooth' });
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-white via-secondary/10 to-muted/20">
      <nav className="fixed top-0 left-0 right-0 bg-white/80 backdrop-blur-md z-50 border-b border-border/50">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <h1 className="text-3xl font-bold text-foreground">D√©lice</h1>
            <div className="flex items-center gap-4">
              <div className="hidden md:flex gap-8">
                {['home', 'catalog', 'delivery', 'contacts'].map((section) => (
                  <button
                    key={section}
                    onClick={() => scrollToSection(section)}
                    className={`text-sm font-medium transition-colors hover:text-primary ${
                      activeSection === section ? 'text-primary' : 'text-muted-foreground'
                    }`}
                  >
                    {section === 'home' && '–ì–ª–∞–≤–Ω–∞—è'}
                    {section === 'catalog' && '–ö–∞—Ç–∞–ª–æ–≥'}
                    {section === 'delivery' && '–î–æ—Å—Ç–∞–≤–∫–∞'}
                    {section === 'contacts' && '–ö–æ–Ω—Ç–∞–∫—Ç—ã'}
                  </button>
                ))}
              </div>
              <Button
                variant={isAdmin ? "default" : "outline"}
                size="sm"
                onClick={() => setIsAdmin(!isAdmin)}
              >
                <Icon name={isAdmin ? "Lock" : "Unlock"} size={16} />
              </Button>
            </div>
          </div>
        </div>
      </nav>

      <section id="home" className="pt-32 pb-20 px-4">
        <div className="container mx-auto max-w-5xl text-center animate-fade-in">
          <h2 className="text-6xl md:text-7xl font-bold mb-6 text-foreground">
            –ê–≤—Ç–æ—Ä—Å–∫–∏–µ —Ç–æ—Ä—Ç—ã
            <br />
            <span className="text-primary">—Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã</span>
          </h2>
          <p className="text-xl text-muted-foreground mb-10 max-w-2xl mx-auto">
            –°–æ–∑–¥–∞—ë–º –¥–µ—Å–µ—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º —É–∫—Ä–∞—à–µ–Ω–∏–µ–º –≤–∞—à–µ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞
          </p>
          <Button
            size="lg"
            className="bg-primary hover:bg-primary/90 text-primary-foreground px-8 py-6 text-lg rounded-full"
            onClick={() => scrollToSection('catalog')}
          >
            –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥
          </Button>
        </div>
      </section>

      <section id="catalog" className="py-20 px-4 bg-white/50">
        <div className="container mx-auto max-w-6xl">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-5xl font-bold text-foreground">–ù–∞—à–∏ —Ç–æ—Ä—Ç—ã</h2>
            {isAdmin && (
              <Button onClick={handleAddCake} className="gap-2">
                <Icon name="Plus" size={20} />
                –î–æ–±–∞–≤–∏—Ç—å —Ç–æ—Ä—Ç
              </Button>
            )}
          </div>
          <p className="text-center text-muted-foreground mb-16 text-lg">
            –ö–∞–∂–¥—ã–π —Ç–æ—Ä—Ç —Å–æ–∑–¥–∞—ë—Ç—Å—è —Å –ª—é–±–æ–≤—å—é –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
          </p>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {cakes.map((cake, index) => (
              <Card
                key={cake.id}
                className="overflow-hidden border-0 shadow-lg hover:shadow-2xl transition-all duration-300 hover:-translate-y-2 animate-scale-in relative"
                style={{ animationDelay: `${index * 100}ms` }}
              >
                {isAdmin && (
                  <div className="absolute top-2 right-2 z-10 flex gap-2">
                    <Button
                      size="sm"
                      variant="secondary"
                      onClick={() => handleEditCake(cake)}
                      className="bg-white/90 hover:bg-white"
                    >
                      <Icon name="Edit" size={16} />
                    </Button>
                    <Button
                      size="sm"
                      variant="destructive"
                      onClick={() => handleDeleteCake(cake.id)}
                      className="bg-red-500/90 hover:bg-red-600"
                    >
                      <Icon name="Trash2" size={16} />
                    </Button>
                  </div>
                )}
                <div className="aspect-square overflow-hidden">
                  <img
                    src={cake.image}
                    alt={cake.name}
                    className="w-full h-full object-cover transition-transform duration-500 hover:scale-110"
                  />
                </div>
                <CardContent className="p-6">
                  <h3 className="text-2xl font-semibold mb-3 text-foreground">{cake.name}</h3>
                  <p className="text-muted-foreground mb-4 leading-relaxed">{cake.description}</p>
                  <div className="flex items-center justify-between mb-4">
                    <span className="text-2xl font-bold text-primary">{cake.pricePerKg} ‚ÇΩ</span>
                    <span className="text-sm text-muted-foreground">–∑–∞ –∫–≥</span>
                  </div>
                  {!isAdmin && (
                    <Button 
                      onClick={() => handleOrderCake(cake)} 
                      className="w-full bg-primary hover:bg-primary/90"
                    >
                      –ó–∞–∫–∞–∑–∞—Ç—å
                    </Button>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      <section id="delivery" className="py-20 px-4">
        <div className="container mx-auto max-w-4xl">
          <h2 className="text-5xl font-bold text-center mb-4 text-foreground">–î–æ—Å—Ç–∞–≤–∫–∞</h2>
          <Card className="p-8 md:p-12 border-0 shadow-xl bg-white/80 backdrop-blur">
            <div className="space-y-6">
              <div className="flex items-start gap-4">
                <div className="bg-primary/10 p-3 rounded-full">
                  <Icon name="Truck" className="text-primary" size={24} />
                </div>
                <div>
                  <h3 className="text-xl font-semibold mb-2 text-foreground">–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É</h3>
                  <p className="text-muted-foreground leading-relaxed">
                    –î–æ—Å—Ç–∞–≤–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ –≤—Å–µ–º—É –≥–æ—Ä–æ–¥—É –∑–∞ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–ª–∞—Ç—É. –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç
                    —Ä–∞–π–æ–Ω–∞ –∏ –æ–±–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.
                  </p>
                </div>
              </div>
              <div className="flex items-start gap-4">
                <div className="bg-accent/10 p-3 rounded-full">
                  <Icon name="Clock" className="text-accent-foreground" size={24} />
                </div>
                <div>
                  <h3 className="text-xl font-semibold mb-2 text-foreground">–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏</h3>
                  <p className="text-muted-foreground leading-relaxed">
                    –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–∫–∞–∑—ã –º–∏–Ω–∏–º—É–º –∑–∞ 48 —á–∞—Å–æ–≤. –î–æ—Å—Ç–∞–≤–ª—è–µ–º –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è —Å 9:00
                    –¥–æ 21:00.
                  </p>
                </div>
              </div>
              <div className="flex items-start gap-4">
                <div className="bg-secondary/30 p-3 rounded-full">
                  <Icon name="Package" className="text-secondary-foreground" size={24} />
                </div>
                <div>
                  <h3 className="text-xl font-semibold mb-2 text-foreground">–£–ø–∞–∫–æ–≤–∫–∞</h3>
                  <p className="text-muted-foreground leading-relaxed">
                    –ö–∞–∂–¥—ã–π —Ç–æ—Ä—Ç —É–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç—Å—è –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–æ—Ä–æ–±–∫—É —Å —É—á—ë—Ç–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–π
                    —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
                  </p>
                </div>
              </div>
            </div>
          </Card>
        </div>
      </section>

      <section id="contacts" className="py-20 px-4 bg-white/50">
        <div className="container mx-auto max-w-4xl text-center">
          <h2 className="text-5xl font-bold mb-4 text-foreground">–ö–æ–Ω—Ç–∞–∫—Ç—ã</h2>
          <p className="text-muted-foreground mb-12 text-lg">
            –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
          </p>
          <div className="flex flex-col sm:flex-row gap-6 justify-center items-center">
            <Button
              size="lg"
              className="bg-[#25D366] hover:bg-[#20BA5A] text-white px-8 py-6 text-lg rounded-full gap-3 min-w-[200px]"
              asChild
            >
              <a href="https://wa.me/79518313316" target="_blank" rel="noopener noreferrer">
                <Icon name="MessageCircle" size={24} />
                WhatsApp
              </a>
            </Button>
            <Button
              size="lg"
              className="bg-[#0088cc] hover:bg-[#006699] text-white px-8 py-6 text-lg rounded-full gap-3 min-w-[200px]"
              asChild
            >
              <a href="https://t.me/+79518313316" target="_blank" rel="noopener noreferrer">
                <Icon name="Send" size={24} />
                Telegram
              </a>
            </Button>
          </div>
          <p className="mt-12 text-muted-foreground text-sm">
            –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 9:00 –¥–æ 21:00
          </p>
        </div>
      </section>

      <footer className="bg-foreground/5 py-8 px-4 border-t border-border/50">
        <div className="container mx-auto text-center text-muted-foreground text-sm">
          <p>¬© 2024 D√©lice. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
        </div>
      </footer>

      <Dialog open={!!orderForm} onOpenChange={() => setOrderForm(null)}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑</DialogTitle>
          </DialogHeader>
          {orderForm?.cake && (
            <div className="space-y-4">
              <div className="bg-muted/50 p-4 rounded-lg">
                <h3 className="font-semibold text-lg mb-2">{orderForm.cake.name}</h3>
                <p className="text-sm text-muted-foreground mb-3">{orderForm.cake.description}</p>
                <div className="text-primary font-bold">{orderForm.cake.pricePerKg} ‚ÇΩ –∑–∞ –∫–≥</div>
              </div>
              
              <div>
                <label className="text-sm font-medium">–í–µ—Å —Ç–æ—Ä—Ç–∞ (–∫–≥)</label>
                <Input
                  type="number"
                  min="0.5"
                  step="0.5"
                  value={orderForm.weight}
                  onChange={(e) => setOrderForm({ ...orderForm, weight: Number(e.target.value) })}
                  className="mt-1"
                />
              </div>

              <div className="bg-primary/10 p-3 rounded-lg">
                <div className="flex justify-between items-center">
                  <span className="text-sm font-medium">–ò—Ç–æ–≥–æ:</span>
                  <span className="text-2xl font-bold text-primary">{calculateTotal()} ‚ÇΩ</span>
                </div>
              </div>

              <div>
                <label className="text-sm font-medium">–í–∞—à–µ –∏–º—è</label>
                <Input
                  value={orderForm.name}
                  onChange={(e) => setOrderForm({ ...orderForm, name: e.target.value })}
                  placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
                  className="mt-1"
                />
              </div>

              <div>
                <label className="text-sm font-medium">–¢–µ–ª–µ—Ñ–æ–Ω</label>
                <Input
                  value={orderForm.phone}
                  onChange={(e) => setOrderForm({ ...orderForm, phone: e.target.value })}
                  placeholder="+7 900 123-45-67"
                  className="mt-1"
                />
              </div>

              <div>
                <label className="text-sm font-medium">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
                <Textarea
                  value={orderForm.comment}
                  onChange={(e) => setOrderForm({ ...orderForm, comment: e.target.value })}
                  placeholder="–î–∞—Ç–∞, –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏, –ø–æ–∂–µ–ª–∞–Ω–∏—è..."
                  className="mt-1"
                  rows={3}
                />
              </div>

              <div className="flex gap-2 pt-4">
                <Button variant="outline" onClick={() => setOrderForm(null)} className="flex-1">
                  –û—Ç–º–µ–Ω–∞
                </Button>
                <Button 
                  onClick={handleSubmitOrder} 
                  className="flex-1 bg-[#25D366] hover:bg-[#20BA5A] text-white gap-2"
                  disabled={!orderForm.name || !orderForm.phone}
                >
                  <Icon name="MessageCircle" size={18} />
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ WhatsApp
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      <Dialog open={!!editingCake} onOpenChange={() => setEditingCake(null)}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä—Ç</DialogTitle>
          </DialogHeader>
          {editingCake && (
            <div className="space-y-4">
              <div>
                <label className="text-sm font-medium">–ù–∞–∑–≤–∞–Ω–∏–µ</label>
                <Input
                  value={editingCake.name}
                  onChange={(e) => setEditingCake({ ...editingCake, name: e.target.value })}
                  className="mt-1"
                />
              </div>
              <div>
                <label className="text-sm font-medium">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <Textarea
                  value={editingCake.description}
                  onChange={(e) => setEditingCake({ ...editingCake, description: e.target.value })}
                  className="mt-1"
                  rows={3}
                />
              </div>
              <div>
                <label className="text-sm font-medium">–¶–µ–Ω–∞ –∑–∞ –∫–≥ (‚ÇΩ)</label>
                <Input
                  type="number"
                  value={editingCake.pricePerKg}
                  onChange={(e) => setEditingCake({ ...editingCake, pricePerKg: Number(e.target.value) })}
                  className="mt-1"
                />
              </div>
              <div>
                <label className="text-sm font-medium">URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</label>
                <Input
                  value={editingCake.image}
                  onChange={(e) => setEditingCake({ ...editingCake, image: e.target.value })}
                  className="mt-1"
                />
              </div>
              <div className="flex justify-end gap-2 pt-4">
                <Button variant="outline" onClick={() => setEditingCake(null)}>
                  –û—Ç–º–µ–Ω–∞
                </Button>
                <Button onClick={handleSaveCake}>
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default Index;